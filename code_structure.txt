LAYERS
1. lrelu()
2. instance_norm
3. general_conv2d
4. general_deconv2d



MODEL
1. resnet_block (input_resnet, dimensions,name)
  output_resnet
  - tf.pad
  - general_conv2d
  - tf.pad
  - general_conv2d
  return input_resnet + output_resnet

2. Generator (size of the transformator varies; 9 resnet blocks for 256*256 image size, 6 res.blocks for 128*128 images, 2 res.blocks for 32*32 image size)
  window size
  stride size
  
  # encoder
  pad_input = tf.pad
  3 * input: general_conv2d - the previous layes, double the window size for every step
  
  # transformator
  x * resnet_blocks (input: last general_conv2d )
  
  # decoder
  3 * general_deconv2d (input: last resnet block)

  output tf.nn.tanh(last general_deconv2d layer)

3. Discriminator
  5 * general_conv2d layers 

MAIN
  initiate global variables

class CycleGAN()
    - prepare_for_input (set up variables for input)
    - read_input (into variables above)
    - model_setup:
      - initiate generaor and Discriminator
      - setup loss calculation function
      - save training images (cycle and fake)
      - fake image pool (saves generated image to the corresponding pool of images)




